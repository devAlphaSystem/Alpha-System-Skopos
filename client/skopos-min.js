((window,document)=>{const scriptElement=document.currentScript;if(!scriptElement)return;const endpoint=scriptElement.getAttribute("data-endpoint")||"/api/event",autoTrackPageviews="false"!==scriptElement.getAttribute("data-auto-track-pageviews"),observeDom="false"!==scriptElement.getAttribute("data-observe-dom");function sendData(payload){const data=JSON.stringify(payload);try{navigator.sendBeacon?navigator.sendBeacon(endpoint,new Blob([data],{type:"application/json"})):fetch(endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:data,keepalive:!0})}catch(e){console.error("Skopos:",e)}}function track(eventName,eventType="custom",customData={}){sendData({type:eventType,name:eventName,url:new URL(window.location.href).href,referrer:document.referrer,screenWidth:window.screen.width,screenHeight:window.screen.height,language:navigator.language,customData:customData})}function trackError(errorMessage,stackTrace){sendData({type:"jsError",name:"jsError",url:new URL(window.location.href).href,referrer:document.referrer,screenWidth:window.screen.width,screenHeight:window.screen.height,language:navigator.language,errorMessage:errorMessage,stackTrace:stackTrace})}let lastPath="";function trackPageView(){const currentPath=window.location.pathname;currentPath!==lastPath&&(lastPath=currentPath,track(currentPath,"pageView"))}function scanAndBindEvents(rootElement){const elements=rootElement.querySelectorAll("[skopos-event]");for(const element of elements){if(element.hasAttribute("skopos-bound"))continue;const eventName=element.getAttribute("skopos-event"),eventType=element.getAttribute("skopos-event-on")||"click";element.addEventListener(eventType,(()=>{let customData={};const eventDataJSON=element.getAttribute("skopos-data");if(eventDataJSON)try{customData=JSON.parse(eventDataJSON)}catch(e){console.error("Skopos: Invalid JSON in skopos-data.",e,element)}const eventDataFromAttr=element.getAttribute("skopos-data-from");if(eventDataFromAttr){const definitions=eventDataFromAttr.split(",");for(const def of definitions){const parts=def.split(":");if(2!==parts.length)continue;const key=parts[0].trim(),selector=parts[1].trim(),targetElement=document.querySelector(selector);if(targetElement){const value="value"in targetElement?targetElement.value:targetElement.textContent;customData[key]=value.trim()}}}track(eventName,"custom",customData)})),element.setAttribute("skopos-bound","true")}}function processCommand(...args){const[command,...rest]=args;if("event"===command){const[eventName,customData]=rest;"string"==typeof eventName&&track(eventName,"custom",customData||{})}else"pageview"===command&&trackPageView()}if(window.skopos=(...args)=>{window.skopos.q=window.skopos.q||[],window.skopos.q.push(args)},window.skopos=processCommand,window.skopos.q)for(const args of window.skopos.q)processCommand(...args);if(autoTrackPageviews){const originalPushState=history.pushState;history.pushState=function(...args){originalPushState.apply(this,args),setTimeout(trackPageView,50)},window.addEventListener("popstate",trackPageView),"complete"===document.readyState?trackPageView():window.addEventListener("load",trackPageView,{once:!0})}document.addEventListener("DOMContentLoaded",(()=>{if(scanAndBindEvents(document.body),observeDom){new MutationObserver((mutations=>{for(const mutation of mutations)for(const node of mutation.addedNodes)node.nodeType===Node.ELEMENT_NODE&&scanAndBindEvents(node)})).observe(document.body,{childList:!0,subtree:!0})}}));const originalConsoleError=console.error;console.error=(...args)=>{originalConsoleError.apply(console,args);try{const message=args.map((arg=>"object"==typeof arg?JSON.stringify(arg):arg)).join(" ");trackError(message,(new Error).stack||"")}catch(e){}};const originalConsoleWarn=console.warn;console.warn=(...args)=>{originalConsoleWarn.apply(console,args);try{const message=args.map((arg=>"object"==typeof arg?JSON.stringify(arg):arg)).join(" ");trackError(message,(new Error).stack||"")}catch(e){}},window.addEventListener("error",(event=>{trackError(event.message,event.error?event.error.stack:"")})),window.addEventListener("unhandledrejection",(event=>{trackError(event.reason?.message?event.reason.message:event.reason?event.reason.toString():"Unhandled promise rejection",event.reason?.stack?event.reason.stack:"")}))})(window,document);